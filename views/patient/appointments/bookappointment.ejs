<%- layout("./layouts/patientboilerplate") %>

<style>
    body { background-color: #f8f9fa; }
    
    .appointment-form-container {
        max-width: 100%;
        background: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .form-header {
        font-size: 22px;
        font-weight: bold;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .form-group {
        margin-bottom: 15px;
    }

    label {
        font-weight: bold;
        display: block;
        margin-bottom: 5px;
    }

    input, select, textarea {
        width: 100%;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .success-message {
        text-align: center;
        color: green;
        font-weight: bold;
        margin-top: 10px;
    }
</style>

<div class="container">
    <div class="form-header">
        <h2>Book an Appointment</h2>
    </div>
    
    <!-- Enhanced Validation Rules Display -->
    <div class="alert alert-info" role="alert">
        <h5><strong>üìÖ Appointment Booking Rules:</strong></h5>
        <ul class="mb-0">
            <li><strong>‚úÖ ALLOWED:</strong> Today or any future date</li>
            <li><strong>‚ùå NOT ALLOWED:</strong> Past dates</li>
            <li><strong>‚ùå NOT ALLOWED:</strong> Dates more than 1 week in advance</li>
            <li><strong>‚è∞ SAME-DAY BOOKING:</strong> Can ONLY book if current time is AT LEAST 30 minutes BEFORE appointment time</li>
        </ul>
    </div>
    
    <div class="appointment-form-container my-3">
        <form id="appointmentForm" action="/patient/bookappointment" method="POST" enctype="application/x-www-form-urlencoded" class="needs-validation" novalidate>
            <div class="row">
                <div class="col-md-6 mb-2">
                    <label class="form-label" >First Name</label>
                    <input type="text" name="patient[firstName]" class="form-control" required>
                    <div class="invalid-feedback">First name is required.</div>
                </div>
        
                <div class="col-md-6 mb-2">
                    <label class="form-label">Last Name</label>
                    <input type="text" name="patient[lastName]" class="form-control" required>
                    <div class="invalid-feedback">Last name is required.</div>
                </div>
            </div>
        
            <div class="row">
                <div class="col-md-6 mb-2">
                    <label class="form-label">Gender</label>
                    <select name="patient[gender]" class="form-select" required>
                        <option value="" selected disabled>Select a gender</option>
                        <option value="male">Male</option>
                        <option value="female">Female</option>
                        <option value="other">Other</option>
                    </select>
                    <div class="invalid-feedback">Please select a gender.</div>
                </div>
        
                <div class="col-md-6 mb-2">
                    <label class="form-label">Mobile</label>
                    <input type="text" name="patient[mobile]" class="form-control" value="<%=patient.phone%>" required pattern="^\d{10}$">
                    <div class="invalid-feedback">Enter a valid 10-digit mobile number.</div>
                </div>
            </div>
        
            <div class="mb-2">
                <label class="form-label">Email</label>
                <input type="email" name="patient[email]" class="form-control" value="<%=patient.email%>" required>
                <div class="invalid-feedback">Please enter a valid email.</div>
            </div>
        
            <div class="mb-2">
                <label class="form-label">Select Doctor</label>
                <select name="patient[doctorId]" class="form-select" required>  
                        <option value="<%= doctor._id %>"><%= doctor.username %></option>
                </select>
                <div class="invalid-feedback">Please select a doctor.</div>
            </div>
        
            <div class="mb-2">
                <label class="form-label">Appointment Date</label>
                <input type="date" name="patient[appointmentDate]" id="appointmentDate" class="form-control" required 
                       min="<%= minBookingDate %>" max="<%= maxBookingDate %>">
                <div class="invalid-feedback">Please select a valid date.</div>
                <small class="form-text text-muted">
                    You can book appointments from today up to 1 week in advance. 
                    Available time slots will update based on your selected date.
                </small>
            </div>
        
            <div class="mb-2">
                <label class="form-label">Time Slot</label>
                <select name="patient[timeSlot]" id="timeSlotSelect" class="form-select" required>
                    <option value="" selected disabled>Select a date first to see available slots</option>
                </select>
                <div class="invalid-feedback">Please choose a time slot.</div>
                <small class="form-text text-muted">Only time slots available on the selected date will be shown in AM/PM format.</small>
            </div>
        
            <div class="mb-2">
                <label class="form-label">Reason/Condition</label>
                <textarea name="patient[reason]" class="form-control" rows="3" required></textarea>
                <div class="invalid-feedback">Please Enter Valid Reason</div>
            </div>
        
            <button class="btn btn-primary" type="submit">Book Appointment</button>
        </form>        
    </div>
</div>

<!-- Bootstrap Form Validation Script -->
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const form = document.getElementById("appointmentForm");
        form.addEventListener("submit", function (event) {
            if (!form.checkValidity()) {
                event.preventDefault();
                event.stopPropagation();
            }
            form.classList.add("was-validated");
        });
    });
</script>

<!-- Enhanced Dynamic Time Slot Update Script with AM/PM Format -->
<script>
    // Doctor availability data from the server
    const doctorAvailability = JSON.parse('<%-JSON.stringify(doctor.availabilitySlots || [])%>');
    
    // Function to convert 24-hour time to 12-hour AM/PM format
    function convertTo12Hour(time24) {
        const [hours, minutes] = time24.split(':');
        let hour = parseInt(hours);
        const minute = minutes;
        const ampm = hour >= 12 ? 'PM' : 'AM';
        
        // Convert hour to 12-hour format
        if (hour === 0) {
            hour = 12; // Midnight
        } else if (hour > 12) {
            hour = hour - 12; // Afternoon/Evening
        }
        
        return `${hour}:${minute} ${ampm}`;
    }
    
    document.addEventListener("DOMContentLoaded", function() {
        const dateInput = document.getElementById("appointmentDate");
        const timeSlotSelect = document.getElementById("timeSlotSelect");
        
        // Set initial date to today
        const today = new Date().toISOString().split('T')[0];
        dateInput.value = today;
        
        // Add client-side date validation
        dateInput.addEventListener("input", function() {
            const selectedDate = new Date(this.value);
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            
            const oneWeekFromToday = new Date(today);
            oneWeekFromToday.setDate(today.getDate() + 7);
            
            if (selectedDate < today) {
                this.setCustomValidity("‚ùå You CANNOT book a PAST DATE! Please select today or a future date.");
            } else if (selectedDate > oneWeekFromToday) {
                this.setCustomValidity("‚ùå You CANNOT book a date MORE THAN 1 WEEK from today! Please select a date within the next 7 days.");
            } else {
                this.setCustomValidity("");
            }
        });
        
        // Update time slots when date changes
        dateInput.addEventListener("change", updateTimeSlots);
        
        // Initial update
        updateTimeSlots();
        
        function updateTimeSlots() {
            const selectedDate = dateInput.value;
            const doctorId = '<%= doctor._id %>';
            
            // Clear existing options
            timeSlotSelect.innerHTML = '<option value="" selected disabled>Loading slots...</option>';
            
            if (!selectedDate) {
                timeSlotSelect.innerHTML = '<option value="" selected disabled>Select a date first</option>';
                return;
            }
            
            // Fetch slots with status from backend
            fetch(`/patient/available-slots/${doctorId}/${selectedDate}`)
                .then(response => response.json())
                .then(data => {
                    timeSlotSelect.innerHTML = '<option value="" selected disabled>Select a time slot</option>';
                    
                    if (!data.success) {
                        timeSlotSelect.innerHTML = '<option value="" disabled>Error loading slots</option>';
                        return;
                    }
                    
                    if (!data.allSlotsWithStatus || data.allSlotsWithStatus.length === 0) {
                        timeSlotSelect.innerHTML = '<option value="" disabled>No slots available for this date</option>';
                        return;
                    }
                    
                    // Add all slots with proper status indicators
                    data.allSlotsWithStatus.forEach(slot => {
                        const option = document.createElement('option');
                        option.value = slot.slotTime;
                        
                        // Convert times to AM/PM format for display
                        const startTimeAMPM = convertTo12Hour(slot.startTime);
                        const endTimeAMPM = convertTo12Hour(slot.endTime);
                        
                        // Set option text based on status
                        let displayText = `${startTimeAMPM} - ${endTimeAMPM}`;
                        
                        if (slot.status === 'available' && !slot.disabled) {
                            displayText += ' ‚úÖ Available';
                            option.style.color = '#28a745';
                            option.style.fontWeight = 'bold';
                        } else if (slot.status === 'reserved') {
                            displayText += slot.statusText;
                            option.disabled = true;
                            option.style.backgroundColor = '#fff3cd';
                            option.style.color = '#856404';
                            option.style.fontStyle = 'italic';
                        } else if (slot.disabled) {
                            displayText += slot.statusText;
                            option.disabled = true;
                            option.style.backgroundColor = '#f8f9fa';
                            option.style.color = '#6c757d';
                        }
                        
                        option.textContent = displayText;
                        timeSlotSelect.appendChild(option);
                    });
                })
                .catch(error => {
                    console.error('Error fetching slots:', error);
                    timeSlotSelect.innerHTML = '<option value="" disabled>Error loading slots - check console</option>';
                    
                    // Fallback: Show doctor availability slots if API fails
                    if (doctorAvailability && doctorAvailability.length > 0) {
                        const selectedDateObj = new Date(selectedDate);
                        const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
                        const dayOfWeek = days[selectedDateObj.getDay()];
                        
                        // Filter slots for the selected day
                        const daySlots = doctorAvailability.filter(slot => slot.day === dayOfWeek && slot.isAvailable);
                        
                        if (daySlots.length > 0) {
                            timeSlotSelect.innerHTML = '<option value="" selected disabled>Select a time slot</option>';
                            
                            daySlots.forEach(slot => {
                                const option = document.createElement('option');
                                option.value = `${slot.startTime}-${slot.endTime}`;
                                
                                const startTimeAMPM = convertTo12Hour(slot.startTime);
                                const endTimeAMPM = convertTo12Hour(slot.endTime);
                                option.textContent = `${startTimeAMPM} - ${endTimeAMPM} (${slot.slotDuration} min)`;
                                
                                timeSlotSelect.appendChild(option);
                            });
                        }
                    }
                });
        }
    });
</script>